{
  "api/Biocs.Codon.html": {
    "href": "api/Biocs.Codon.html",
    "title": "Struct Codon | BioC# Documents",
    "keywords": "Struct Codon Represents a nucleotide triplet. Implements IEquatable < Codon > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Biocs Assembly : cs.temp.dll.dll Syntax public struct Codon : IEquatable<Codon> Remarks The default constructor creates an object whose value is Gap . Constructors Codon(DnaBase, DnaBase, DnaBase) Initializes a new instance of the Codon structure to the specified nucleotide triplet. Declaration public Codon(DnaBase first, DnaBase second, DnaBase third) Parameters Type Name Description DnaBase first The nucleotide in the first position. DnaBase second The nucleotide in the second position. DnaBase third The nucleotide in the third position. Properties Any Gets a codon that is filled with unknown bases. Declaration public static Codon Any { get; } Property Value Type Description Codon First Gets the nucleotide in the first position of this codon. Declaration public DnaBase First { get; } Property Value Type Description DnaBase Gap Gets a codon that is filled with gaps. Declaration public static Codon Gap { get; } Property Value Type Description Codon IsAtomic Gets a value indicating whether this codon is completely specified. Declaration public bool IsAtomic { get; } Property Value Type Description Boolean Second Gets the nucleotide in the second position of this codon. Declaration public DnaBase Second { get; } Property Value Type Description DnaBase Symbols Gets the string representation of this codon. Declaration public string Symbols { get; } Property Value Type Description String Third Gets the nucleotide in the third position of this codon. Declaration public DnaBase Third { get; } Property Value Type Description DnaBase Methods Equals(Codon) Determines whether the current Codon instance is equal to a specified Codon instance. Declaration public bool Equals(Codon other) Parameters Type Name Description Codon other The codon to compare to this instance. Returns Type Description Boolean true if the two instances are equal; otherwise, false . Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Parse(String) Converts the string representation of a codon to an equivalent Codon instance. Declaration public static Codon Parse(string value) Parameters Type Name Description String value A string to convert. Returns Type Description Codon A Codon instance whose symbol is represented by value . Exceptions Type Condition ArgumentException value contains an unknown character in a certain position. ToLower() Converts this codon to its lowercase equivalent. Declaration public Codon ToLower() Returns Type Description Codon The lowercase equivalent of this instance. ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToUpper() Converts this codon to its uppercase equivalent. Declaration public Codon ToUpper() Returns Type Description Codon The uppercase equivalent of this instance. TryParse(String, out Codon) Tries to convert the string representation of a codon to an equivalent Codon instance, and returns a value that indicates whether the conversion succeeded. Declaration public static bool TryParse(string value, out Codon result) Parameters Type Name Description String value A string with a length of 3 characters to convert. Codon result When this method returns, result contains a Codon instance that is represented by value if the conversion succeeded, or Gap if the conversion failed. Returns Type Description Boolean true if value was converted successfully; otherwise, false . Operators Equality(Codon, Codon) Compares two Codon structures for equality. Declaration public static bool operator ==(Codon one, Codon other) Parameters Type Name Description Codon one The first instance of Codon to compare. Codon other The second instance of Codon to compare. Returns Type Description Boolean true if the two instances are equal; otherwise, false . Inequality(Codon, Codon) Compares two Codon structures for inequality. Declaration public static bool operator !=(Codon one, Codon other) Parameters Type Name Description Codon one The first instance of Codon to compare. Codon other The second instance of Codon to compare. Returns Type Description Boolean false if the two instances are equal; otherwise, true . Implements System.IEquatable<T>"
  },
  "api/Biocs.Collections.CollectionTools.html": {
    "href": "api/Biocs.Collections.CollectionTools.html",
    "title": "Class CollectionTools | BioC# Documents",
    "keywords": "Class CollectionTools Provides static methods for collections. Inheritance Object CollectionTools Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Biocs.Collections Assembly : cs.temp.dll.dll Syntax public static class CollectionTools Methods AllItemsAreEqual<T>(IEnumerable<T>) Determines whether all items in the specified collection are equal. Declaration public static bool AllItemsAreEqual<T>(this IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> collection The to check equality between items. Returns Type Description Boolean true if collection is not empty and all items are equal; otherwise, false . Type Parameters Name Description T The type of items of collection . Exceptions Type Condition ArgumentNullException collection is null . AllItemsAreEqual<T>(IEnumerable<T>, Nullable<IEqualityComparer<T>>, out T) Determines whether all items in the specified collection are equal, and tries to get the unique item. Declaration public static bool AllItemsAreEqual<T>(this IEnumerable<T> collection, IEqualityComparer<T>? comparer, out T value) Parameters Type Name Description IEnumerable <T> collection The to check equality between items. System.Nullable < IEqualityComparer <T>> comparer An to use to compare items, or null to use the default . T value When this method returns, value contains the first item of collection if all items are equal, or the default value for the T type if collection is empty or contains different items. Returns Type Description Boolean true if collection is not empty and all items are equal; otherwise, false . Type Parameters Name Description T The type of items of collection . Exceptions Type Condition ArgumentNullException collection is null ."
  },
  "api/Biocs.Collections.Counter-1.html": {
    "href": "api/Biocs.Collections.Counter-1.html",
    "title": "Class Counter<T> | BioC# Documents",
    "keywords": "Class Counter<T> Represents a tally counter to count the frequency of items. Inheritance Object Counter<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Biocs.Collections Assembly : cs.temp.dll.dll Syntax public class Counter<T> Type Parameters Name Description T The type of items to count. Remarks Counter<T> accepts null as a valid value for reference types. Constructors Counter() Initializes a new instance of the Counter<T> class that is empty, has zero capacity, and uses the default equality comparer. Declaration public Counter() Counter(Counter<T>) Initializes a new instance of the Counter<T> class that contains unique items and counts copied from the specified Counter<T> and uses the same equality comparer. Declaration public Counter(Counter<T> other) Parameters Type Name Description Counter <T> other The Counter<T> whose unique items and counts are copied to the new Counter<T> . Exceptions Type Condition ArgumentNullException other is null . Counter(Int32) Initializes a new instance of the Counter<T> class that is empty, has the specified initial capacity, and uses the default equality comparer. Declaration public Counter(int capacity) Parameters Type Name Description Int32 capacity The initial number of items that the Counter<T> can contain. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. Counter(Int32, Nullable<IEqualityComparer<T>>) Initializes a new instance of the Counter<T> class that is empty, has the specified initial capacity, and uses the specified equality comparer. Declaration public Counter(int capacity, IEqualityComparer<T>? comparer) Parameters Type Name Description Int32 capacity The initial number of items that the Counter<T> can contain. System.Nullable < IEqualityComparer <T>> comparer The implementation to use when comparing items, or null to use the default for the type of the item. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. Counter(Nullable<IEqualityComparer<T>>) Initializes a new instance of the Counter<T> class that is empty, has zero capacity, and uses the specified equality comparer. Declaration public Counter(IEqualityComparer<T>? comparer) Parameters Type Name Description System.Nullable < IEqualityComparer <T>> comparer The implementation to use when comparing items, or null to use the default for the type of the item. Properties Comparer Gets the that is used to determine equality of items for the Counter<T> . Declaration public IEqualityComparer<T> Comparer { get; } Property Value Type Description IEqualityComparer <T> NumberOfItems Gets the number of the kinds of items that the Counter<T> contains. Declaration public int NumberOfItems { get; } Property Value Type Description Int32 RepeatedItems Gets an enumerable collection that contains items repeated by each count. Declaration public IEnumerable<T> RepeatedItems { get; } Property Value Type Description IEnumerable <T> TotalCount Gets the total count of items. Declaration public int TotalCount { get; } Property Value Type Description Int32 UniqueItems Gets an enumerable collection of unique items that the Counter<T> has counted before now. Declaration public IEnumerable<T> UniqueItems { get; } Property Value Type Description IEnumerable <T> Remarks This enumerable collection also contains items whose the count is 0. Enumerators retured by this enumerable collection cannot be used to modify the Counter<T> . For example, the following enumeration raises an InvalidOperationException . var counter = new Counter<int>(); counter.AddRange(new[] { 1, 2, 3 }); foreach (int item in counter.UniqueItems) { counter.Reset(item); } Methods Add(T) Counts an object once. Declaration public void Add(T item) Parameters Type Name Description T item The object to be counted to the Counter<T> . Add(T, Int32) Counts an object a specified number of times. Declaration public void Add(T item, int times) Parameters Type Name Description T item The object to be counted to the Counter<T> . Int32 times The number of times to count item . Exceptions Type Condition ArgumentOutOfRangeException times is less than 0. AddRange(IEnumerable<T>) Counts the items of the specified collection. Declaration public void AddRange(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items The collection whose items should be counted. Exceptions Type Condition ArgumentNullException items is null . Clear() Removes all items from the Counter<T> . Declaration public void Clear() Contains(T) Determines whether the Counter<T> contains the specified object. Declaration public bool Contains(T item) Parameters Type Name Description T item The object to locate in the Counter<T> . Returns Type Description Boolean true if item is found in the Counter<T> ; otherwise, false . CopyTo(T[], Int32) Copies the Counter<T> unique items to an existing one-dimensional Array , starting at the specified array index. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional Array that is the destination of the unique items copied from Counter<T> . Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null . ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of items in the Counter<T> is greater than the available space from arrayIndex to the end of the destination array . GetCount(T) Gets the number of times that the item occurs in the Counter<T> . Declaration public int GetCount(T item) Parameters Type Name Description T item The object to get the count. Returns Type Description Int32 The number of times that item occurs in the Counter<T> . Remarks If item is not contained in the Counter<T> , this method returns 0. Remove(T) Decreases the count of the specified item by one. Declaration public bool Remove(T item) Parameters Type Name Description T item The item to decrement the count value. Returns Type Description Boolean true if the count of item was successfully decremented; otherwise, false . Remove(T, Int32) Decreases the count of the specified item by the specified amount. Declaration public int Remove(T item, int times) Parameters Type Name Description T item The item to decrement the count value. Int32 times The amount by which to decrement the counter value. Returns Type Description Int32 The amount of the count to be decreased acutually. Reset() Sets the number of times that each item occurs in the Counter<T> to zero. The collection of items is preserved. Declaration public void Reset() Reset(T) Sets the number of times that the specified item occurs in the Counter<T> to zero. Declaration public void Reset(T item) Parameters Type Name Description T item The item to reset the count."
  },
  "api/Biocs.Collections.Deque-1.html": {
    "href": "api/Biocs.Collections.Deque-1.html",
    "title": "Class Deque<T> | BioC# Documents",
    "keywords": "Class Deque<T> Represents a double-ended queue with a dynamic array. Inheritance Object Deque<T> Implements IReadOnlyList <T> Namespace : Biocs.Collections Assembly : cs.temp.dll.dll Syntax public sealed class Deque<T> : IList<T>, IReadOnlyList<T> Type Parameters Name Description T The element type of the double-ended queue. Constructors Deque() Initializes a new instance of the Deque<T> class that is empty and has zero capacity. Declaration public Deque() Deque(IEnumerable<T>) Initializes a new instance of the Deque<T> class that contains elements copied from the specified . Declaration public Deque(IEnumerable<T> collection) Parameters Type Name Description IEnumerable <T> collection The whose elements are copied to the new Deque<T> . Remarks The elements are copied onto the Deque<T> in the same order they are read by the enumerator of collection . If the type of collection implements , is used to copy elements. Exceptions Type Condition ArgumentNullException collection is null . Deque(Int32) Initializes a new instance of the Deque<T> class that is empty and has the specified initial capacity. Declaration public Deque(int capacity) Parameters Type Name Description Int32 capacity The initial number of elements that the Deque<T> can contain. Exceptions Type Condition ArgumentOutOfRangeException capacity is less than 0. Properties Capacity Gets or sets the total number of elements the internal data structure can hold without resizing. Declaration public int Capacity { get; set; } Property Value Type Description Int32 Exceptions Type Condition ArgumentOutOfRangeException The value in a set operation is less than Count . Count Gets the number of elements actually contained in the Deque<T> . Declaration public int Count { get; } Property Value Type Description Int32 First Gets or sets the first element of the Deque<T> . Declaration public T First { get; set; } Property Value Type Description T Exceptions Type Condition InvalidOperationException The Deque<T> is empty. Item[Int32] Gets or sets the element at the specified index. Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index The zero-based index of the element to get or set. Property Value Type Description T The element at the specified index. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than Count . Last Gets or sets the last element of the Deque<T> . Declaration public T Last { get; set; } Property Value Type Description T Exceptions Type Condition InvalidOperationException The Deque<T> is empty. Methods AddFirst(T) Adds a new element at the start of the Deque<T> . Declaration public void AddFirst(T item) Parameters Type Name Description T item The value to add at the start of the Deque<T> . AddLast(T) Adds a new element at the end of the Deque<T> . Declaration public void AddLast(T item) Parameters Type Name Description T item The value to add at the end of the Deque<T> . Clear() Removes all elements from the Deque<T> . Declaration public void Clear() Contains(T) Determines whether an element is in the Deque<T> . Declaration public bool Contains(T item) Parameters Type Name Description T item The value to locate in the Deque<T> . Returns Type Description Boolean true if item is found in the Deque<T> ; otherwise, false . CopyTo(T[], Int32) Copies the Deque<T> elements to an existing one-dimensional Array . Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array The one-dimensional Array that is the destination of the elements copied from Deque<T> . Int32 arrayIndex The zero-based index in array at which copying begins. Exceptions Type Condition ArgumentNullException array is null . ArgumentOutOfRangeException arrayIndex is less than 0. ArgumentException The number of elements in the Deque<T> is greater than the available space from arrayIndex to the end of the destination array . CopyTo(Int32, T[], Int32, Int32) Copies a range of elements from the Deque<T> to an existing one-dimensional Array . Declaration public void CopyTo(int index, T[] array, int arrayIndex, int count) Parameters Type Name Description Int32 index The zero-based index in the Deque<T> at which copying begins. T[] array The one-dimensional Array that is the destination of the elements copied from Deque<T> . Int32 arrayIndex The zero-based index in array at which copying begins. Int32 count The number of elements to copy. Exceptions Type Condition ArgumentNullException array is null . ArgumentOutOfRangeException index , arrayIndex or count is less than 0. ArgumentException count is greater than the number of elements from index to the end of the Deque<T> . -or- count is greater than the available space from arrayIndex to the end of the destination array . GetEnumerator() Returns an enumerator that iterates through the Deque<T> . Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> An for the Deque<T> . Remarks If changes are made to the collection, the next call to throws an InvalidOperationException . IndexOf(T) Searches for the specified value and returns the zero-based index of the first occurrence within the Deque<T> . Declaration public int IndexOf(T item) Parameters Type Name Description T item The value to locate in the Deque<T> . Returns Type Description Int32 The zero-based index of the first occurrence of item within the Deque<T> , if found; otherwise, -1. Remarks This method determines equality using the default equality comparer . Insert(Int32, T) Inserts an element into the Deque<T> at the specified index. Declaration public void Insert(int index, T item) Parameters Type Name Description Int32 index The zero-based index at which item should be inserted. T item The value to insert. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is greater than Count . InsertRange(Int32, IEnumerable<T>) Inserts the elements of a collection into the Deque<T> at the specified index. Declaration public void InsertRange(int index, IEnumerable<T> collection) Parameters Type Name Description Int32 index The zero-based index at which the new elements should be inserted. IEnumerable <T> collection The collection whose elements should be inserted into the Deque<T> . Exceptions Type Condition ArgumentNullException collection is null . ArgumentOutOfRangeException index is less than 0. -or- index is greater than Count . Remove(T) Removes the first occurrence of a specific element from the Deque<T> . Declaration public bool Remove(T item) Parameters Type Name Description T item The element to remove from the Deque<T> . Returns Type Description Boolean true if item is successfully removed; otherwise, false . RemoveAt(Int32) Removes the element at the specified index of the Deque<T> . Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index The zero-based index of the element to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- index is equal to or greater than Count . RemoveFirst() Removes the element at the start of the Deque<T> . Declaration public void RemoveFirst() Exceptions Type Condition InvalidOperationException The Deque<T> is empty. RemoveLast() Removes the element at the end of the Deque<T> . Declaration public void RemoveLast() Exceptions Type Condition InvalidOperationException The Deque<T> is empty. RemoveRange(Int32, Int32) Removes a range of elements from the Deque<T> . Declaration public void RemoveRange(int index, int count) Parameters Type Name Description Int32 index The zero-based starting index of the range of elements to remove. Int32 count The number of elements to remove. Exceptions Type Condition ArgumentOutOfRangeException index is less than 0. -or- count is less than 0. ArgumentException index and count do not denote a valid range of elements in the Deque<T> . Implements IReadOnlyList<>"
  },
  "api/Biocs.Collections.html": {
    "href": "api/Biocs.Collections.html",
    "title": "Namespace Biocs.Collections | BioC# Documents",
    "keywords": "Namespace Biocs.Collections Classes CollectionTools Provides static methods for collections. Counter<T> Represents a tally counter to count the frequency of items. Deque<T> Represents a double-ended queue with a dynamic array."
  },
  "api/Biocs.DnaBase.html": {
    "href": "api/Biocs.DnaBase.html",
    "title": "Struct DnaBase | BioC# Documents",
    "keywords": "Struct DnaBase Represents nucleotides for DNA. Implements IEquatable < DnaBase > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Biocs Assembly : cs.temp.dll.dll Syntax public struct DnaBase : IEquatable<DnaBase> Remarks Each member other than Name property and EqualsCaseInsensitive(DnaBase) method performs a case-sensitive operation. By default, each instance is uppercase except gaps. The default constructor creates an object whose value is Gap . Properties Adenine Gets the DnaBase instance for adenine. Declaration public static DnaBase Adenine { get; } Property Value Type Description DnaBase Any Gets the DnaBase instance for an unknown base. Declaration public static DnaBase Any { get; } Property Value Type Description DnaBase Cytosine Gets the DnaBase instance for cytosine. Declaration public static DnaBase Cytosine { get; } Property Value Type Description DnaBase Gap Gets the DnaBase instance for a gap. Declaration public static DnaBase Gap { get; } Property Value Type Description DnaBase Guanine Gets the DnaBase instance for guanine. Declaration public static DnaBase Guanine { get; } Property Value Type Description DnaBase IsAtomic Gets a value indicating whether this nucleotide is completely specified. Declaration public bool IsAtomic { get; } Property Value Type Description Boolean IsGap Gets a value indicating whether this instance represents a gap. Declaration public bool IsGap { get; } Property Value Type Description Boolean IsLower Gets a value indicating whether this nucleotide has a lowercase alphabetic symbol and is not a gap. Declaration public bool IsLower { get; } Property Value Type Description Boolean IsUpper Gets a value indicating whether this nucleotide has an uppercase alphabetic symbol and is not a gap. Declaration public bool IsUpper { get; } Property Value Type Description Boolean Name Gets the description of this nucleotide. Declaration public string Name { get; } Property Value Type Description String Remarks This property doesn't distinguish between uppercase and lowercase. Symbol Gets the character representation of this nucleotide. Declaration public char Symbol { get; } Property Value Type Description Char Thymine Gets the DnaBase instance for thymine. Declaration public static DnaBase Thymine { get; } Property Value Type Description DnaBase Methods Complement() Returns a complentary nucleotide of this nucleotide. Declaration public DnaBase Complement() Returns Type Description DnaBase A complementary nucleotide. Equals(DnaBase) Determines whether the current DnaBase instance is equal to a specified DnaBase instance. Declaration public bool Equals(DnaBase other) Parameters Type Name Description DnaBase other The nucleotide to compare to this instance. Returns Type Description Boolean true if the two instances are equal; otherwise, false . Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) EqualsCaseInsensitive(DnaBase) Compares two DnaBase structures ignoring case for equality. Declaration public bool EqualsCaseInsensitive(DnaBase other) Parameters Type Name Description DnaBase other The nucleotide to compare to this instance. Returns Type Description Boolean true if the two instances are equal; otherwise, false . GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Parse(Char) Converts the character representation of a nucleotide to an equivalent DnaBase instance. Declaration public static DnaBase Parse(char value) Parameters Type Name Description Char value A character to convert. Returns Type Description DnaBase A DnaBase instance whose symbol is represented by value . Exceptions Type Condition ArgumentException value is not one of the symbols defined for DnaBase . ToLower() Converts the value of a nucleotide to its lowercase equivalent. Declaration public DnaBase ToLower() Returns Type Description DnaBase The lowercase equivalent of this instance. ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() ToUpper() Converts the value of a nucleotide to its uppercase equivalent. Declaration public DnaBase ToUpper() Returns Type Description DnaBase The uppercase equivalent of this instance. TryParse(Char, out DnaBase) Tries to convert the character representation of a nucleotide to an equivalent DnaBase instance, and returns a value that indicates whether the conversion succeeded. Declaration public static bool TryParse(char value, out DnaBase result) Parameters Type Name Description Char value A character to convert. DnaBase result When this method returns, result contains a DnaBase instance whose symbol is represented by value if the conversion succeeded, or Gap if the conversion failed. Returns Type Description Boolean true if value was converted successfully; otherwise, false . Operators Equality(DnaBase, DnaBase) Compares two DnaBase structures for equality. Declaration public static bool operator ==(DnaBase one, DnaBase other) Parameters Type Name Description DnaBase one The first instance of DnaBase to compare. DnaBase other The second instance of DnaBase to compare. Returns Type Description Boolean true if the two instances are equal; otherwise, false . Inequality(DnaBase, DnaBase) Compares two DnaBase structures for inequality. Declaration public static bool operator !=(DnaBase one, DnaBase other) Parameters Type Name Description DnaBase one The first instance of DnaBase to compare. DnaBase other The second instance of DnaBase to compare. Returns Type Description Boolean false if the two instances are equal; otherwise, true . Implements System.IEquatable<T>"
  },
  "api/Biocs.html": {
    "href": "api/Biocs.html",
    "title": "Namespace Biocs | BioC# Documents",
    "keywords": "Namespace Biocs Classes StringResourceUsageAttribute Specifies the usage of string resources. Structs Codon Represents a nucleotide triplet. DnaBase Represents nucleotides for DNA."
  },
  "api/Biocs.IO.BgzfStream.html": {
    "href": "api/Biocs.IO.BgzfStream.html",
    "title": "Class BgzfStream | BioC# Documents",
    "keywords": "Class BgzfStream Provides access to streams in the BGZF compression format. Inheritance Object BgzfStream Namespace : Biocs.IO Assembly : cs.temp.dll.dll Syntax public class BgzfStream : Stream Constructors BgzfStream(Stream, CompressionLevel) Initializes a new instance of the BgzfStream class with the specified stream and compression level. Declaration public BgzfStream(Stream stream, CompressionLevel level) Parameters Type Name Description Stream stream The stream to compress. CompressionLevel level One of the values that indicates whether to emphasize speed or compression size. Remarks Closing the stream also closes the underlying stream. Exceptions Type Condition ArgumentNullException stream is null . ArgumentException level is not a valid enumeration value. BgzfStream(Stream, CompressionLevel, Boolean) Initializes a new instance of the BgzfStream class with the specified stream and compression level, and a value that specifies whether to leave the stream open. Declaration public BgzfStream(Stream stream, CompressionLevel level, bool leaveOpen) Parameters Type Name Description Stream stream The stream to compress. CompressionLevel level One of the values that indicates whether to emphasize speed or compression size. Boolean leaveOpen true to leave the stream open; otherwise, false . Exceptions Type Condition ArgumentNullException stream is null . ArgumentException level is not a valid enumeration value. BgzfStream(Stream, CompressionMode) Initializes a new instance of the BgzfStream class with the specified stream and compression mode. Declaration public BgzfStream(Stream stream, CompressionMode mode) Parameters Type Name Description Stream stream The stream to compress or decompress. CompressionMode mode One of the values that indicates the action to take. Remarks Closing the stream also closes the underlying stream. The compression level is set to when the compression mode is . Exceptions Type Condition ArgumentNullException stream is null . ArgumentException mode is not a valid enumeration value. BgzfStream(Stream, CompressionMode, Boolean) Initializes a new instance of the BgzfStream class with the specified stream and compression mode, and a value that specifies whether to leave the stream open. Declaration public BgzfStream(Stream stream, CompressionMode mode, bool leaveOpen) Parameters Type Name Description Stream stream The stream to compress or decompress. CompressionMode mode One of the values that indicates the action to take. Boolean leaveOpen true to leave the stream open; otherwise, false . Remarks The compression level is set to when the compression mode is . Exceptions Type Condition ArgumentNullException stream is null . ArgumentException mode is not a valid enumeration value. Properties CanRead Gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description Boolean CanSeek Gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean CanWrite Gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean Length This property is not supported and always throws a NotSupportedException . Declaration public override long Length { get; } Property Value Type Description Int64 Exceptions Type Condition NotSupportedException This property is not supported on this stream. Position This property is not supported and always throws a NotSupportedException . Declaration public override long Position { get; set; } Property Value Type Description Int64 Exceptions Type Condition NotSupportedException This property is not supported on this stream. Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Flush() Writes any buffered data to the underlying stream. Declaration public override void Flush() Exceptions Type Condition NotSupportedException The size of compressed bytes for a BGZF block exceeds about 64 KB. IsBgzfFile(String) Determines whether the specified file is in the BGZF format. Declaration public static bool IsBgzfFile(string path) Parameters Type Name Description String path The file to check. Returns Type Description Boolean true if the specified file has the regular BGZF header; otherwise, false . Read(Byte[], Int32, Int32) Reads a sequence of decompressed bytes from the underlying stream. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes used to store decompressed bytes. Int32 offset The zero-based byte offset in buffer at which to begin storing decompressed bytes. Int32 count The maximum number of decompressed bytes to be read. Returns Type Description Int32 The total number of decompressed bytes read into the buffer. This can be less than count or zero if the end of the stream has been reached. Exceptions Type Condition ArgumentNullException buffer is null . ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support reading. ObjectDisposedException The method were called after the stream was closed. Seek(Int64, SeekOrigin) This method is not supported and always throws a NotSupportedException . Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset SeekOrigin origin Returns Type Description Int64 Exceptions Type Condition NotSupportedException This method is not supported on this stream. SetLength(Int64) This method is not supported and always throws a NotSupportedException . Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value Exceptions Type Condition NotSupportedException This method is not supported on this stream. Write(Byte[], Int32, Int32) Writes a sequence of compressed bytes to the underlying stream. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes to compress. Int32 offset The zero-based byte offset in buffer at which to begin compressing. Int32 count The number of bytes to be compress. Exceptions Type Condition ArgumentNullException buffer is null . ArgumentOutOfRangeException offset or count is negative. ArgumentException The sum of offset and count is larger than the buffer length. NotSupportedException The stream does not support writing. -or- The size of compressed bytes for a BGZF block exceeds about 64 KB. ObjectDisposedException The method were called after the stream was closed."
  },
  "api/Biocs.IO.html": {
    "href": "api/Biocs.IO.html",
    "title": "Namespace Biocs.IO | BioC# Documents",
    "keywords": "Namespace Biocs.IO Classes BgzfStream Provides access to streams in the BGZF compression format."
  },
  "api/Biocs.Numerics.DoubleMersenneTwister.html": {
    "href": "api/Biocs.Numerics.DoubleMersenneTwister.html",
    "title": "Class DoubleMersenneTwister | BioC# Documents",
    "keywords": "Class DoubleMersenneTwister Represents double-precision Mersenne Twister pseudorandom number generator based on IEEE 754 format. Inheritance Object DoubleMersenneTwister Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Biocs.Numerics Assembly : cs.temp.dll.dll Syntax public class DoubleMersenneTwister Remarks For details about Mersenne Twister, see http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/. Currently, the environment where the architecture is big-endian is not supported. Constructors DoubleMersenneTwister() Initializes a new instance of the DoubleMersenneTwister class, using a time-dependent default seed value. Declaration public DoubleMersenneTwister() DoubleMersenneTwister(Int32) Initializes a new instance of the DoubleMersenneTwister class, using the specified seed value. Declaration public DoubleMersenneTwister(int seed) Parameters Type Name Description Int32 seed A 32-bit integer used as the seed. DoubleMersenneTwister(Int32[]) Initializes a new instance of the DoubleMersenneTwister class, using the specified seed array. Declaration public DoubleMersenneTwister(int[] seeds) Parameters Type Name Description Int32 [] seeds An array of 32-bit integers used as the seed. Exceptions Type Condition ArgumentNullException seeds is null . Methods Next() Returns a double-precision pseudorandom number that distributes uniformly in the range [0, 1). Declaration public double Next() Returns Type Description Double A random floating-point number that is greater than or equal to 0.0, and less than 1.0. NextOpen() Returns a double-precision pseudorandom number that distributes uniformly in the range (0, 1). Declaration public double NextOpen() Returns Type Description Double A random floating-point number that is greater than 0.0, and less than 1.0."
  },
  "api/Biocs.Numerics.html": {
    "href": "api/Biocs.Numerics.html",
    "title": "Namespace Biocs.Numerics | BioC# Documents",
    "keywords": "Namespace Biocs.Numerics Classes DoubleMersenneTwister Represents double-precision Mersenne Twister pseudorandom number generator based on IEEE 754 format."
  },
  "api/Biocs.StringResourceUsageAttribute.html": {
    "href": "api/Biocs.StringResourceUsageAttribute.html",
    "title": "Class StringResourceUsageAttribute | BioC# Documents",
    "keywords": "Class StringResourceUsageAttribute Specifies the usage of string resources. Inheritance Object Attribute StringResourceUsageAttribute Implements _Attribute Inherited Members Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, Boolean) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, Boolean) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(ParameterInfo, Boolean) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, Boolean) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, Boolean) Attribute.GetCustomAttributes(Module, Type, Boolean) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, Boolean) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, Boolean) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, Boolean) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, Boolean) Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, Boolean) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, Boolean) Attribute.Equals(Object) Attribute.GetHashCode() Attribute.Match(Object) Attribute.IsDefaultAttribute() Attribute._Attribute.GetTypeInfoCount(UInt32) Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr) Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr) Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr) Attribute.TypeId Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Biocs Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, AllowMultiple = true, Inherited = false)] public sealed class StringResourceUsageAttribute : Attribute, _Attribute Remarks This API is not intended to be used directly from your code. Constructors StringResourceUsageAttribute(String) Initializes a new instance of the StringResourceUsageAttribute class. Declaration public StringResourceUsageAttribute(string name) Parameters Type Name Description String name The name of the string resource to be used. Exceptions Type Condition ArgumentNullException name is null . StringResourceUsageAttribute(String, Int32) Initializes a new instance of the StringResourceUsageAttribute class with the number of format items. Declaration public StringResourceUsageAttribute(string name, int formatItemCount) Parameters Type Name Description String name The name of the string resource to be used. Int32 formatItemCount The number of format items contained in the value of the string resource. Exceptions Type Condition ArgumentNullException name is null . ArgumentOutOfRangeException formatItemCount is less than 0. Properties FormatItemCount Gets the number of format items contained in the value of the string resource. Declaration public int FormatItemCount { get; } Property Value Type Description Int32 Name Gets the name of the string resource to be used. Declaration public string Name { get; } Property Value Type Description String ResourceCheckOnly Gets or sets a value indicating whether the name and the value in the resource should only be checked. Declaration public bool ResourceCheckOnly { get; set; } Property Value Type Description Boolean Remarks If any element is generated from the applied method by a compiler, or the local resource class is not used for the formatting operation, the value of this property is set to true . In that case, a tester will not check the body of the applied method. Implements System.Runtime.InteropServices._Attribute"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "BioC# API Documentation | BioC# Documents",
    "keywords": "BioC# API Documentation The following is a list of namespaces. Namespace Description Biocs Biocs.Collections Biocs.IO Biocs.Numerics"
  },
  "articles/getting-started.html": {
    "href": "articles/getting-started.html",
    "title": "Getting started | BioC# Documents",
    "keywords": "Getting started"
  },
  "articles/index.html": {
    "href": "articles/index.html",
    "title": "BioC# Articles | BioC# Documents",
    "keywords": "BioC# Articles Getting started"
  },
  "index.html": {
    "href": "index.html",
    "title": "BioC# | BioC# Documents",
    "keywords": "BioC# Bioinformatics library for .NET Standard with C# Articles API Documentation Note WIP"
  }
}